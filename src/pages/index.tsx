import type { NextPage } from "next";
import { useSession } from "next-auth/react";
import { useRouter } from "next/router";
import Head from "next/head";
import { useState } from "react";
import { trpc } from "../utils/trpc";

function isValidHttpUrl(tempUrl: string) {
    let url;

    try {
        url = new URL(tempUrl);
    } catch (_) {
        return false;
    }

    return url.protocol === "http:" || url.protocol === "https:";
}

const UrlForm: React.FC<{ userId: string }> = ({ userId }) => {
    const router = useRouter();

    const [url, setUrl] = useState("");
    const [slug, setSlug] = useState("");

    const [urlError, setUrlError] = useState("");
    const [slugError, setSlugError] = useState("");

    const [success, setSuccess] = useState(false);

    const { mutate: createShortUrl } = trpc.useMutation("url.create");

    return (
        <div className="flex flex-col items-center">
            <h1 className="text-lg mb-2">Create a new Short Url</h1>
            <input
                className="w-1/2 mx-auto mb-2"
                type="text"
                placeholder="URL"
                value={url}
                onChange={(e) => {
                    setUrl(e.target.value);
                }}
            />
            {urlError && (
                <div className="text-red-500 text-sm mb-2">{urlError}</div>
            )}
            <input
                className="w-1/2 mx-auto mb-2"
                type="text"
                placeholder="Slug (optional)"
                value={slug}
                onChange={(e) => setSlug(e.target.value)}
            />
            {slugError && (
                <div className="text-red-500 text-sm mb-2">{slugError}</div>
            )}
            <button
                onClick={() => {
                    if (!url) {
                        setUrlError("URL is required");
                        return;
                    }
                    if (!isValidHttpUrl(url)) {
                        setUrlError("Invalid URL");
                        return;
                    }
                    if (slug.includes("/") || slug.includes(" ")) {
                        setSlugError("Slug cannot contain spaces or /");
                        return;
                    }

                    createShortUrl({ userId, url, slug });

                    setUrl("");
                    setSlug("");

                    setUrlError("");
                    setSlugError("");

                    setSuccess(true);
                }}
                className="w-fit bg-white hover:bg-gray-100 text-gray-800 font-mnedium py-2 px-4 border rounded shadow my-2"
            >
                Create!
            </button>
            {success && (
                <div className="text-green-500 text-sm mb-2">
                    Successfully created short url!
                </div>
            )}
        </div>
    );
};

const HomeContents = () => {
    const { data: session, status } = useSession();

    if (status === "loading") {
        return <div>Loading...</div>;
    }

    if (!session || !session.user?.id) {
        return (
            <div className="w-screen flex justify-center items-center">
                <h1 className="mt-[40vh] font-medium text-4xl">
                    Not logged in
                </h1>
            </div>
        );
    }

    return (
        <div className="w-screen text-center">
            <div className="mt-6 font-semibold text-2xl">
                Hello {session.user?.name} ðŸ‘‹
            </div>
            <div className="my-4">
                <a href="/my-links" className="text-blue-500">
                    View my links
                </a>
            </div>

            <UrlForm userId={session.user?.id} />
        </div>
    );
};
const Home: NextPage = () => {
    return (
        <>
            <Head>
                <title>Create T3 App</title>
                <meta name="description" content="Generated by create-t3-app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <HomeContents />
        </>
    );
};

export default Home;
